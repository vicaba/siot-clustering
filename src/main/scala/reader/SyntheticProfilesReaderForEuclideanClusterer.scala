package reader

import breeze.linalg.{DenseMatrix, DenseVector}
import types.clusterer.{DataTypeMetadata, TypesX_48}
import types.clusterer.immutable.Point

object SyntheticProfilesReaderForEuclideanClusterer extends TemplateForSyntheticProfilesReader {

  val TotalMinutesPerLoad: Int = 1440

  override type SingleLoadOutputType      = (String, DenseVector[Double])
  override type AccumulatedLoadOutputType = Point

  object DefaultLoadBuilder extends LoadBuilder {
    override def apply(id: Int, values: Vector[Double], label: String): (String, DenseVector[Double]) =
      (label, DenseVector(values: _*))
  }

  override def applyDefault(mainFolder: String,
                            subFolders: Iterable[String],
                            applianceOutputFileName: String,
                            lightingOutputFileName: String,
                            ids: Iterable[Int],
                            windowSize: Int): Vector[AccumulatedLoadOutputType] = apply(
    mainFolder,
    subFolders,
    subFolder => LoadFileAndLoadBuilder(mainFolder + subFolder + applianceOutputFileName, DefaultLoadBuilder),
    subFolder => LoadFileAndLoadBuilder(mainFolder + subFolder + lightingOutputFileName, DefaultLoadBuilder),
    ids,
    windowSize
  )

  /**
    *
    * Reads files applianceOutputFileName, lightingOutputFileName for each profile.
    * Directory structure is prepared to be mainFolder/{subFolder}/{applianceOutputFileName|lightingOutputFileName}.
    * Data format is in CSV where there are no column headers and each row starts with a label. The label of the appliance.
    * Data is expected to be synthetically generated by https://github.com/keirstead-group/simelec .
    *
    * @param mainFolder
    * @param subFolders
    * @param applianceFileAndBuilder
    * @param lightingFileAndBuilder
    * @param ids
    * @param windowSize
    * @return
    */
  override def apply(
      mainFolder: String,
      subFolders: Iterable[String],
      applianceFileAndBuilder: String => SyntheticProfilesReaderForEuclideanClusterer.LoadFileAndLoadBuilder,
      lightingFileAndBuilder: String => SyntheticProfilesReaderForEuclideanClusterer.LoadFileAndLoadBuilder,
      ids: Iterable[Int],
      windowSize: Int): Vector[AccumulatedLoadOutputType] = {

    assert(subFolders.size == ids.size, "the number of subFolders is not equal to the number of ids")

    subFolders
      .zip(ids)
      .map {
        case (subFolder, id) =>
          val r: Seq[(String, DenseVector[Double])] = readSyntheticLoads(
            applianceFileAndBuilder(subFolder),
            lightingFileAndBuilder(subFolder),
            windowSize
          )
          val dataLabels = r.map(_._1).toList
          val data       = DenseMatrix(r.map(_._2): _*)
          Point(id, data, dataLabels, None)(DataTypeMetadata.generateDataTypeMetadata(forColumns = TotalMinutesPerLoad / windowSize))

      }
      .toVector
  }

}
